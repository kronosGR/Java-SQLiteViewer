type: edu
custom_name: Something went wrong!
files:
- name: src/viewer/ApplicationRunner.java
  visible: true
  text: |
    package viewer;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new SQLiteViewer();
        }
    }
  learner_created: false
- name: src/viewer/SQLiteViewer.java
  visible: true
  text: |
    package viewer;

    import javax.swing.*;

    public class SQLiteViewer extends JFrame {

        public SQLiteViewer() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(700, 900);
            setLayout(null);
            setResizable(false);
            setLocationRelativeTo(null);
        }
    }
  learner_created: false
- name: test/ViewerTest.java
  visible: false
  text: |-
    import com.google.gson.internal.$Gson$Preconditions;
    import org.assertj.swing.fixture.*;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import org.junit.AfterClass;
    import viewer.SQLiteViewer;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.WindowEvent;
    import java.io.File;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Locale;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class ViewerTest extends SwingTest {

        public ViewerTest() {
            super(new SQLiteViewer());
        }

        @SwingComponent(name = "FileNameTextField")
        private JTextComponentFixture fileNameTextField;

        @SwingComponent(name = "OpenFileButton")
        private JButtonFixture openFileButton;

        @SwingComponent(name = "TablesComboBox")
        private JComboBoxFixture tablesComboBox;

        @SwingComponent(name = "QueryTextArea")
        private JTextComponentFixture queryTextArea;

        @SwingComponent(name = "ExecuteQueryButton")
        private JButtonFixture queryButton;

        @SwingComponent(name = "Table")
        private JTableFixture table;

        private static final String firstDatabaseFileName = "firstDatabase.db";
        private static final String secondDatabaseFileName = "secondDatabase.db";

        @DynamicTest(order = 1)
        CheckResult test1() {

            requireEditable(fileNameTextField);
            requireEnabled(fileNameTextField);
            requireVisible(fileNameTextField);
            requireEmpty(fileNameTextField);

            requireEnabled(openFileButton);
            requireVisible(openFileButton);

            requireVisible(tablesComboBox);
            requireEnabled(tablesComboBox);

            requireVisible(queryTextArea);
            requireDisabled(queryTextArea);
            requireEmpty(queryTextArea);

            requireDisabled(queryButton);
            requireVisible(queryButton);

            requireVisible(table);
            requireEnabled(table);

            return correct();
        }

        @DynamicTest(order = 2)
        CheckResult testDatabaseTablesDisplay() {

            try {
                initDatabase();
            } catch (SQLException exception) {
                return wrong("Can't create database files!\n" + exception.getSQLState());
            }

            fileNameTextField.setText(firstDatabaseFileName);
            openFileButton.click();

            if (tablesComboBox.contents().length != 2) {
                return wrong("Wrong number of items of 'TablesComboBox' combo box.\n" +
                    "Expected 2 tables\n" +
                    "Found " + tablesComboBox.contents().length);
            }

            checkIfComboBoxContainsItems("contacts", "groups");

            return correct();
        }

        @DynamicTest(order = 3)
        CheckResult testQueryTextArea() {
            String selectedTable = tablesComboBox.selectedItem();

            if (selectedTable == null) {
                return wrong("After opening database any table from it should be selected in the combo box!");
            }

            if (!queryTextArea.text().toLowerCase(Locale.ROOT).equals("select * from " + selectedTable + ";")) {
                return wrong("Wrong query in the 'QueryTextArea'. There should be query to select all rows from the selected table!\n" +
                    "Expected query: " + "SELECT * FROM " + selectedTable + ";\n" +
                    "    Your query: " + queryTextArea.text());
            }

            try {
                if (selectedTable.equals("contacts")) {
                    tablesComboBox.selectItem("groups");
                } else {
                    tablesComboBox.selectItem("contacts");
                }
            } catch (Exception ignored) {
                return wrong("Looks like your ComboBox is disabled!");
            }

            selectedTable = tablesComboBox.selectedItem();

            if (!queryTextArea.text().toLowerCase(Locale.ROOT).equals("select * from " + selectedTable + ";")) {
                return wrong("Wrong query in the 'QueryTextArea' after selecting a table. There should be query to select all rows from the selected table!\n" +
                    "Expected query: " + "SELECT * FROM " + selectedTable + ";\n" +
                    "    Your query: " + queryTextArea.text());
            }

            return correct();
        }

        @DynamicTest(order = 4)
        CheckResult changeDatabaseFileAndTestQueryTextArea() {

            fileNameTextField.deleteText().setText(secondDatabaseFileName);
            openFileButton.click();

            if (tablesComboBox.contents().length != 1) {
                return wrong("Wrong number of items of 'TablesComboBox' combo box.\n" +
                    "Expected 1 tables\n" +
                    "Found " + tablesComboBox.contents().length);
            }

            String selectedTable = tablesComboBox.selectedItem();

            if (selectedTable == null) {
                return wrong("After opening database any table from it should be selected in the combo box!");
            }

            if (!queryTextArea.text().toLowerCase(Locale.ROOT).equals("select * from " + selectedTable + ";")) {
                return wrong("Wrong query in the 'QueryTextArea'. There should be query to select all rows from the selected table!\n" +
                    "Expected query: " + "SELECT * FROM " + selectedTable + ";\n" +
                    "    Your query: " + queryTextArea.text());
            }

            return correct();
        }

        @DynamicTest(order = 5)
        CheckResult testDataInTable() {

            fileNameTextField.deleteText().setText(firstDatabaseFileName);
            openFileButton.click();

            if (tablesComboBox.contents().length != 2) {
                return wrong("Wrong number of items of 'TablesComboBox' combo box.\n" +
                    "Expected 2 tables\n" +
                    "Found " + tablesComboBox.contents().length);
            }

            List<String> tables = Arrays.asList(tablesComboBox.contents());

            if (!tables.contains("contacts")) {
                return wrong("Can't find contacts table in the 'TablesComboBox' combo box.");
            }

            tablesComboBox.selectItem("contacts");

            if (!queryTextArea.text().toLowerCase(Locale.ROOT).equals("select * from contacts;")) {
                return wrong("Wrong query in the 'QueryTextArea'. There should be query to select all rows from the selected table!\n" +
                    "Expected query: " + "SELECT * FROM contacts;\n" +
                    "    Your query: " + queryTextArea.text());
            }

            queryButton.click();

            return correct();
        }

        @DynamicTest(order = 6, feedback = "Expected 5 columns and 3 rows in the table!")
        CheckResult checkTableNumbers() {
            table.requireColumnCount(5);
            table.requireRowCount(3);
            return correct();
        }

        @DynamicTest(order = 7)
        CheckResult checkTableContent() {

            String[][] rows = null;

            try {
                rows = table.contents();
            } catch (Exception exception) {
                return CheckResult.wrong("Can't select data from the table! Make sure it exists!");
            }

            int firstNameColumnIndex;
            try {
                firstNameColumnIndex = table.columnIndexFor("first_name");
            } catch (Exception ignored) {
                return wrong("Can't find 'first_name' column in the table!");
            }

            List<String> correctNames = new ArrayList<>(Arrays.asList("Sharmin", "Fred", "Emeli"));

            for (String[] row : rows) {
                correctNames.remove(row[firstNameColumnIndex]);
            }

            if (correctNames.size() != 0) {
                return wrong("Can't find the following first names in the table:\n" + correctNames.toString());
            }

            return correct();
        }

        @DynamicTest(order = 8)
        CheckResult testWrongFileName() {

            fileNameTextField.deleteText().setText("wrong_file_name.db");
            openFileButton.click();

            Window[] windows = Window.getWindows();

            boolean isDialogWindowFound = false;

            for (Window window : windows) {
                if (window instanceof JDialog) {
                    isDialogWindowFound = true;
                    window.dispatchEvent(new WindowEvent(window, WindowEvent.WINDOW_CLOSING));
                }
            }

            if (!isDialogWindowFound) {
                return wrong("Can't find a JDialog window with 'Wrong file name!' error message");
            }

            return correct();
        }

        @DynamicTest(order = 9, feedback = "Query field and query execute button should be disabled if the wrong file name was entered!")
        CheckResult testQueryComponentsAreDisabled() {
            requireDisabled(queryButton);
            requireDisabled(queryTextArea);
            return correct();
        }

        @DynamicTest(order = 10)
        CheckResult testWrongQueryDialogWindow() {

            fileNameTextField.deleteText().setText(firstDatabaseFileName);
            openFileButton.click();

            requireEnabled(queryTextArea);
            requireEnabled(queryButton);

            queryTextArea.setText("SELECT * FROM wrong_table_name;");
            queryButton.click();

            Window[] windows = Window.getWindows();

            boolean isDialogWindowFound = false;

            for (Window window : windows) {
                if (window instanceof JDialog) {
                    isDialogWindowFound = true;
                    window.dispatchEvent(new WindowEvent(window, WindowEvent.WINDOW_CLOSING));
                    break;
                }
            }

            if (!isDialogWindowFound) {
                return wrong("Can't find a JDialog window with 'SQL exception' error message!");
            }

            return correct();
        }

        private static void initDatabase() throws SQLException {

            deleteDatabaseFiles();

            Connection connection = DriverManager.getConnection("jdbc:sqlite:" + firstDatabaseFileName);
            Statement statement = connection.createStatement();
            statement.execute("CREATE TABLE IF NOT EXISTS contacts (\n" +
                "\tcontact_id INTEGER PRIMARY KEY,\n" +
                "\tfirst_name TEXT NOT NULL,\n" +
                "\tlast_name TEXT NOT NULL,\n" +
                "\temail TEXT NOT NULL UNIQUE,\n" +
                "\tphone TEXT NOT NULL UNIQUE\n" +
                ");");
            statement.execute("CREATE TABLE IF NOT EXISTS groups (\n" +
                "   group_id INTEGER PRIMARY KEY,\n" +
                "   name TEXT NOT NULL\n" +
                ");");

            statement.execute("DELETE FROM contacts");
            statement.execute("INSERT INTO contacts VALUES(1, 'Sharmin', 'Pittman', 'sharmin@gmail.com', '202-555-0140')");
            statement.execute("INSERT INTO contacts VALUES(2, 'Fred', 'Hood', 'fred@gmail.com', '202-555-0175')");
            statement.execute("INSERT INTO contacts VALUES(3, 'Emeli', 'Ortega', 'emeli@gmail.com', '202-555-0138')");

            connection.close();

            connection = DriverManager.getConnection("jdbc:sqlite:" + secondDatabaseFileName);
            statement = connection.createStatement();
            statement.execute("CREATE TABLE IF NOT EXISTS projects (\n" +
                "\tid integer PRIMARY KEY,\n" +
                "\tname text NOT NULL,\n" +
                "\tbegin_date text,\n" +
                "\tend_date text\n" +
                ");");
            connection.close();
        }

        @AfterClass
        public static void deleteDatabaseFiles() {
            File firstFile = new File(firstDatabaseFileName);
            if (firstFile.exists()) {
                boolean ignored = firstFile.delete();
            }

            File secondFile = new File(secondDatabaseFileName);
            if (secondFile.exists()) {
                boolean ignored = secondFile.delete();
            }
        }

        private void checkIfComboBoxContainsItems(String... items) {
            String[] comboBoxItems = tablesComboBox.contents();

            for (String item : items) {
                boolean isItemFound = false;
                for (String comboBoxItem : comboBoxItems) {
                    if (item.equals(comboBoxItem)) {
                        isItemFound = true;
                        break;
                    }
                }
                if (!isItemFound) {
                    throw new WrongAnswer("Can't find '" + item + "' table in the combo box!");
                }
            }
        }
    }
  learner_created: false
- name: src/viewer/TableModel.java
  visible: true
  text: |
    package viewer;

    import javax.swing.table.AbstractTableModel;
    import java.util.Map;

    public class TableModel extends AbstractTableModel {
        private String[] columns;
        private Map<Integer, Object[]> data;

        public TableModel(String[] columns, Map<Integer, Object[]> data) {
            this.columns = columns;
            this.data = data;
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public Object getValueAt(int i, int i1) {
            return data.get(i)[i1];
        }

        @Override
        public String getColumnName(int column){
            return columns[column];
        }
    }
  learner_created: true
- name: src/viewer/SQLite.java
  visible: true
  text: |
    package viewer;

    import org.sqlite.SQLiteDataSource;

    import javax.lang.model.element.Name;
    import java.sql.*;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    public class SQLite implements AutoCloseable {

        public static String QUERY_SELECT_ALL = "SELECT * FROM %s;";
        private String url;
        private Connection conn;

        public SQLite(String filename) {
            url = String.format("jdbc:sqlite:%s", filename);
            connect();
        }

        @Override
        public void close() throws Exception {
            conn.close();
        }

        private void connect() {
            SQLiteDataSource ds = new SQLiteDataSource();
            ds.setUrl(url);
            try {
                conn = ds.getConnection();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        public List<String> getTables() {
            List<String> tables = new ArrayList<>();
            try (Statement st = conn.createStatement()) {
                ResultSet rs = st.executeQuery("SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (rs.next()) {
                    String tmp = rs.getString("name");
                    tables.add(tmp);
                }
                return tables;
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        public TableModel executeQuery(String query, String tableName) {
            try (Statement st = conn.createStatement()) {
                ResultSet rs = st.executeQuery(query);
                ResultSetMetaData md = rs.getMetaData();

                int clCount = md.getColumnCount();
                String[] columns = new String[clCount];
                for (int c = 0; c < md.getColumnCount(); c++) {
                    columns[c] = md.getColumnName(c + 1);
                }

                Map<Integer, Object[]> data = new HashMap<>();
                int rowI = 0;
                while (rs.next()) {
                    Object[] row = new Object[clCount];
                    for (int c = 0; c < clCount; c++) {
                        row[c] = rs.getObject(c + 1);
                    }
                    data.put(rowI, row);
                    rowI++;
                }
                return new TableModel(columns, data);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/171/stages/888/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 05 Jan 2023 18:53:02 UTC
record: -1
